openapi: 3.0.0
info:
  title: Tramways Users API
  description: Tramways Users API
  version: 1.0.0
servers:
  - url: http://localhost:8762/tramways/rest

paths:
  /users:
    get:
      operationId: 'getUsers'
      summary: 'Gets all users'
      tags: [ 'users' ]
      responses:
        '200':
          description: 'List of users'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      operationId: 'createUser'
      summary: 'Creates a new user'
      tags: [ 'users' ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        '201':
          description: 'Created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /users/login:
    post:
      operationId: 'login'
      summary: 'Logs a user in'
      tags: [ 'users' ]
      security: [ ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: 'Ok'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StringWrapper'
  /users/logged:
    get:
      operationId: 'logged'
      summary: 'Gets logged user'
      tags: [ 'users' ]
      responses:
        '200':
          description: 'Ok'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /users/{id}:
    get:
      operationId: 'getUser'
      summary: 'Gets a user'
      tags: [ 'users' ]
      parameters:
        - in: path
          name: 'id'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'User'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: 'User not found'
    delete:
      operationId: 'deleteUser'
      summary: 'Deletes a user'
      tags: [ 'users' ]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
  /users/{id}/roles:
    put:
      operationId: 'editRoles'
      summary: 'Edit user''s roles'
      tags: [ 'users' ]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UserRole'
      responses:
        '200':
          description: OK
  /users/{id}/password:
    put:
      operationId: 'editPassword'
      summary: 'Edit user''s password'
      tags: [ 'users' ]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordRequest'
      responses:
        '200':
          description: OK
  /users/{id}/enable:
    put:
      operationId: 'enableUser'
      summary: 'Enable or disable a user'
      tags: [ 'users' ]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BooleanWrapper'
      responses:
        '200':
          description: Ok
  /users/{id}/reset:
    put:
      operationId: 'resetUser'
      summary: 'Reset user''s password'
      tags: [ 'users' ]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StringWrapper'
      responses:
        '200':
          description: OK
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    UserRequest:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
        roles:
          type: array
          items:
            $ref: '#/components/schemas/UserRole'
      required: [ roles ]
    LoginRequest:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    ChangePasswordRequest:
      type: object
      properties:
        oldPassword:
          type: string
        newPassword:
          type: string
    User:
      type: object
      properties:
        uuid:
          type: string
        username:
          type: string
        roles:
          type: array
          items:
            $ref: '#/components/schemas/UserRole'
    UserRole:
      type: string
      enum: [ CLIENT, EXPERT, ADMIN ]
    StringWrapper:
      type: object
      properties:
        value:
          type: string
    BooleanWrapper:
      type: object
      properties:
        value:
          type: boolean
security:
  - bearerAuth: [ ]
